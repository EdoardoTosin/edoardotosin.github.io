name: Deploy Jekyll site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
    paths-ignore:
      - '.github/workflows/ci.yml'
      - '.github/workflows/auto-merge-trusted-prs.yml'

  # Runs when a merged PR has been closed
  pull_request:
    types: [closed]
    branches: [main]

  # Allows manual deployment
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        default: false
        type: boolean

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    # Only run if push to main, manual dispatch, or merged PR with sync label
    if: >
      github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && 
       github.event.pull_request.merged == true && 
       contains(github.event.pull_request.labels.*.name, 'sync'))

    outputs:
      should_deploy: ${{ steps.changes.outputs.should_deploy }}

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Check for changes
        id: changes
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "🚀 Force deployment requested"
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "📝 Push to main detected"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "🏷️ Merged PR with sync label"
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No deployment needed"
          fi

      - name: Setup Ruby
        if: steps.changes.outputs.should_deploy == 'true'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.3'
          bundler-cache: true
          cache-version: 6

      - name: Setup Pages
        if: steps.changes.outputs.should_deploy == 'true'
        id: pages
        uses: actions/configure-pages@v5

      - name: Build with Jekyll
        if: steps.changes.outputs.should_deploy == 'true'
        run: |
          echo "🏗️ Building Jekyll site..."
          bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}" --verbose
          
          echo "📊 Build completed successfully!"
          echo "Site size: $(du -sh _site | cut -f1)"
          echo "Files generated: $(find _site -type f | wc -l)"
        env:
          JEKYLL_ENV: production

      - name: Validate build
        if: steps.changes.outputs.should_deploy == 'true'
        run: |
          # Ensure critical files exist
          if [ ! -f "_site/index.html" ]; then
            echo "❌ Build validation failed: index.html not found"
            exit 1
          fi
          
          # Check for broken internal links (basic check)
          if grep -r "href=\"#.*\"" _site/ | grep -v "href=\"#\"" > /dev/null; then
            echo "✅ Internal links found"
          fi
          
          echo "✅ Build validation passed"

      - name: Upload artifact
        if: steps.changes.outputs.should_deploy == 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site/

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build
    if: needs.build.outputs.should_deploy == 'true'

    permissions:
      pages: write
      id-token: write

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Post-deployment validation
        run: |
          echo "🚀 Deployment completed!"
          echo "📍 Site URL: ${{ steps.deployment.outputs.page_url }}"
          
          # Basic connectivity check
          sleep 30  # Give Pages a moment to update
          if curl -s -o /dev/null -w "%{http_code}" "${{ steps.deployment.outputs.page_url }}" | grep -q "200"; then
            echo "✅ Site is accessible"
          else
            echo "⚠️ Site may still be propagating"
          fi
