name: Auto Merge and Cleanup for Synced Files

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  automerge:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check PR conditions
      id: check_pr
      run: |
        echo "Checking if the PR title starts with 'ðŸ”„ synced file(s) with'..."
        echo "Checking if the PR creator matches the repository owner..."

        if [[ "${{ github.event.pull_request.title }}" == "ðŸ”„ synced file(s) with"* &&
              "${{ github.event.pull_request.user.id }}" == "${{ github.repository_owner_id }}" ]]; then
          echo "Conditions met."
          echo "can_merge=true" >> $GITHUB_ENV
        else
          echo "Conditions not met."
          echo "can_merge=false" >> $GITHUB_ENV
        fi

    - name: Debug PR mergeable status
      id: debug_mergeable_status
      run: |
        response=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}")
        echo "PR response: $response"
        mergeable=$(echo $response | jq -r '.mergeable')

        if [ "$mergeable" == "true" ]; then
          echo "PR is mergeable."
        elif [ "$mergeable" == "null" ]; then
          echo "Mergeable status is not yet available. Exiting workflow."
          exit 1
        else
          echo "PR is not mergeable. Exiting workflow."
          exit 1
        fi

    - name: Wait for mergeable status to update
      run: sleep 10

    - name: Retry mergeable status check
      id: retry_check
      run: |
        for i in {1..3}; do
          response=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}")
          mergeable=$(echo $response | jq -r '.mergeable')

          if [ "$mergeable" == "true" ]; then
            echo "PR is mergeable."
            break
          elif [ "$mergeable" == "null" ]; then
            echo "Mergeable status is not yet available. Retrying in 5 seconds..."
            sleep 5
          else
            echo "PR is not mergeable. Exiting workflow."
            exit 1
          fi
        done

    - name: Merge PR
      if: env.can_merge == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const pull_number = context.payload.pull_request.number;
          const branch = context.payload.pull_request.head.ref;

          try {
            // Merge the pull request using the GitHub REST API
            const mergeResponse = await github.rest.pulls.merge({
              owner,
              repo,
              pull_number,
              merge_method: 'merge'
            });

            console.log(`Merged PR #${pull_number}: ${mergeResponse.data.message}`);

            // Ensure the branch is not the default branch
            const defaultBranch = context.payload.repository.default_branch;
            if (branch === defaultBranch) {
              console.log(`Skipping branch deletion: ${branch} is the default branch.`);
              return;
            }

            // Delete the branch after merging
            if (!context.payload.pull_request.head.repo.fork) {
              console.log(`Deleting branch ${branch}...`);
              await github.rest.git.deleteRef({
                owner,
                repo,
                ref: `heads/${branch}`
              });
              console.log(`Branch ${branch} deleted.`);
            } else {
              console.log(`Branch not deleted because it belongs to a fork.`);
            }

            // Close the pull request after merging and branch deletion
            const closeResponse = await github.rest.pulls.update({
              owner,
              repo,
              pull_number,
              state: 'closed'
            });
            console.log(`Closed PR #${pull_number}: ${closeResponse.data.state}`);

          } catch (error) {
            console.error(`Failed to merge, delete branch, and close pull request: ${error.message}`);
            throw error;
          }

    - name: Trigger another workflow
      if: env.can_merge == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          try {
            console.log('Triggering another workflow...');
            const workflowResponse = await github.rest.actions.createWorkflowDispatch({
              owner,
              repo,
              workflow_id: 'jekyll.yml',
              ref: context.ref
            });
            console.log(`Triggered workflow successfully: ${workflowResponse.data.workflow_run_id}`);
          } catch (error) {
            console.error(`Failed to trigger workflow: ${error.message}`);
            throw error;
          }
