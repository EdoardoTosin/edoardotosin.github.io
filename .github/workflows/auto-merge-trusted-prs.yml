name: Auto-merge Obsidian Sync PRs

on:
  pull_request:
    types: [opened, synchronize, reopened]
  check_suite:
    types: [completed]
  workflow_run:
    workflows: ["Jekyll CI Checks"]
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  auto-merge-sync:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'pull_request' && (
        contains(github.event.pull_request.labels.*.name, 'obsidian-sync') ||
        contains(github.event.pull_request.title, 'sync:') ||
        github.event.pull_request.user.login == github.repository_owner
      )) ||
      (github.event_name == 'check_suite' && github.event.check_suite.conclusion == 'success') ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    
    steps:
      - name: Get PR Information
        uses: actions/github-script@v7
        id: pr-info
        with:
          script: |
            let prNumber, prData;
            
            if (context.eventName === 'pull_request') {
              prNumber = context.payload.pull_request.number;
              prData = context.payload.pull_request;
            } else if (context.eventName === 'check_suite') {
              // Find PR associated with this check suite
              const prs = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: `${context.repo.owner}:${context.payload.check_suite.head_branch}`,
                state: 'open'
              });
              
              if (prs.data.length === 0) {
                console.log('No open PR found for this check suite');
                return { skip: true };
              }
              
              prNumber = prs.data[0].number;
              prData = prs.data[0];
            } else if (context.eventName === 'workflow_run') {
              // Find PR from workflow run
              const prs = context.payload.workflow_run.pull_requests;
              if (prs.length === 0) {
                console.log('No PR associated with this workflow run');
                return { skip: true };
              }
              
              prNumber = prs[0].number;
              const prResponse = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              prData = prResponse.data;
            }
            
            // Check if this is a sync PR
            const isSyncPR = (
              prData.labels.some(label => label.name === 'obsidian-sync') ||
              prData.title.includes('sync:') ||
              (prData.user.login === context.repo.owner && prData.head.ref.includes('sync'))
            );
            
            if (!isSyncPR) {
              console.log('Not a sync PR, skipping auto-merge');
              return { skip: true };
            }
            
            console.log(`Found sync PR #${prNumber}: ${prData.title}`);
            return {
              skip: false,
              number: prNumber,
              title: prData.title,
              html_url: prData.html_url,
              head_sha: prData.head.sha,
              user: prData.user.login
            };

      - name: Wait for All Checks
        if: steps.pr-info.outputs.result != 'null' && fromJSON(steps.pr-info.outputs.result).skip != true
        uses: actions/github-script@v7
        id: wait-for-checks
        with:
          script: |
            const prInfo = ${{ steps.pr-info.outputs.result }};
            const sha = prInfo.head_sha;
            console.log(`Waiting for checks on PR #${prInfo.number}, SHA: ${sha}`);
            
            let attempts = 0;
            const maxAttempts = 90; // 15 minutes with 10-second intervals
            
            while (attempts < maxAttempts) {
              // Get all check runs for this commit
              const checkRuns = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: sha
              });
              
              // Get all status checks for this commit  
              const statusChecks = await github.rest.repos.getCombinedStatusForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: sha
              });
              
              // Filter out this auto-merge workflow
              const relevantCheckRuns = checkRuns.data.check_runs.filter(
                check => !check.name.toLowerCase().includes('auto-merge')
              );
              
              const relevantStatusChecks = statusChecks.data.statuses.filter(
                status => !status.context.toLowerCase().includes('auto-merge')
              );
              
              console.log(`Found ${relevantCheckRuns.length} check runs and ${relevantStatusChecks.length} status checks`);
              
              // Check if we have any checks at all
              if (relevantCheckRuns.length === 0 && relevantStatusChecks.length === 0) {
                if (attempts > 5) { // Wait a bit for checks to appear
                  console.log('No checks found after waiting, proceeding...');
                  return 'success';
                }
              } else {
                // Check if all check runs are completed
                const checkRunsCompleted = relevantCheckRuns.every(check => 
                  check.status === 'completed'
                );
                
                // Check if all status checks are completed
                const statusChecksCompleted = relevantStatusChecks.every(status => 
                  ['success', 'failure', 'error'].includes(status.state)
                );
                
                if (checkRunsCompleted && statusChecksCompleted) {
                  // Check if all are successful
                  const checkRunsSuccessful = relevantCheckRuns.every(check => 
                    ['success', 'neutral', 'skipped'].includes(check.conclusion)
                  );
                  
                  const statusChecksSuccessful = relevantStatusChecks.every(status => 
                    status.state === 'success'
                  );
                  
                  if (checkRunsSuccessful && statusChecksSuccessful) {
                    console.log('‚úÖ All checks passed!');
                    return 'success';
                  } else {
                    const failedCheckRuns = relevantCheckRuns.filter(check => 
                      !['success', 'neutral', 'skipped'].includes(check.conclusion)
                    );
                    const failedStatusChecks = relevantStatusChecks.filter(status => 
                      status.state !== 'success'
                    );
                    
                    console.log(`‚ùå Some checks failed:`);
                    failedCheckRuns.forEach(check => console.log(`  - ${check.name}: ${check.conclusion}`));
                    failedStatusChecks.forEach(status => console.log(`  - ${status.context}: ${status.state}`));
                    return 'failure';
                  }
                }
              }
              
              console.log(`Waiting for checks to complete... (${attempts + 1}/${maxAttempts})`);
              await new Promise(resolve => setTimeout(resolve, 10000)); // Wait 10 seconds
              attempts++;
            }
            
            console.log('‚è∞ Timeout waiting for checks');
            return 'timeout';
          result-encoding: string

      - name: Auto-approve and Merge
        if: |
          steps.pr-info.outputs.result != 'null' && 
          fromJSON(steps.pr-info.outputs.result).skip != true &&
          steps.wait-for-checks.outputs.result == 'success'
        run: |
          PR_INFO='${{ steps.pr-info.outputs.result }}'
          PR_URL=$(echo "$PR_INFO" | jq -r '.html_url')
          PR_TITLE=$(echo "$PR_INFO" | jq -r '.title')
          
          echo "üöÄ Auto-merging sync PR: $PR_TITLE"
          
          # Approve the PR
          gh pr review --approve "$PR_URL" \
            --body "‚úÖ **Auto-approved**: Obsidian sync PR with all CI checks passing
          
          üîç **Validation completed:**
          - Jekyll build successful
          - Content validation passed
          - All automated checks green
          
          ü§ñ This PR was automatically approved and will be merged."
          
          # Wait a moment for the approval to register
          sleep 2
          
          # Merge the PR immediately (not using auto-merge to avoid delays)
          gh pr merge "$PR_URL" --squash \
            --subject "$(echo "$PR_TITLE" | head -c 72)" \
            --body "Automatically merged Obsidian sync changes with passing CI checks"
          
          echo "‚úÖ Successfully merged sync PR!"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on Failure
        if: |
          steps.pr-info.outputs.result != 'null' && 
          fromJSON(steps.pr-info.outputs.result).skip != true &&
          steps.wait-for-checks.outputs.result == 'failure'
        run: |
          PR_INFO='${{ steps.pr-info.outputs.result }}'
          PR_URL=$(echo "$PR_INFO" | jq -r '.html_url')
          
          gh pr comment "$PR_URL" \
            --body "‚ùå **Auto-merge cancelled**: CI checks failed
          
          üîç **Issues detected:**
          - One or more checks did not pass
          - Please review the failing checks above
          - Fix the issues and push new commits to retry
          
          ü§ñ Auto-merge will retry when all checks pass."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on Timeout
        if: |
          steps.pr-info.outputs.result != 'null' && 
          fromJSON(steps.pr-info.outputs.result).skip != true &&
          steps.wait-for-checks.outputs.result == 'timeout'
        run: |
          PR_INFO='${{ steps.pr-info.outputs.result }}'
          PR_URL=$(echo "$PR_INFO" | jq -r '.html_url')
          
          gh pr comment "$PR_URL" \
            --body "‚è∞ **Auto-merge timeout**: CI checks took too long
          
          üîç **What happened:**
          - Checks did not complete within 15 minutes
          - This may indicate a stuck or very slow build
          - Please check the Actions tab for any stuck workflows
          
          ü§ñ You may need to manually merge this PR or re-trigger the checks."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
